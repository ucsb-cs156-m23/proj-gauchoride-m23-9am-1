name: "04-gh-pages-rebuild-part-2"
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["02-gh-pages-rebuild-part-1"]
    types:
      - completed

env:
  GH_TOKEN: ${{ github.token }}
  javadoc_dest: target/site/apidocs
  storybook_dest: frontend/storybook_static
  jacoco_dest: target/site/jacoco
  pitest_dest: target/pit-reports
  coverage_dest: frontend/coverage/lcov-report
  stryker_dest: frontend/reports/mutation

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: read

jobs:
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - name: Workflow 2 failed
        run: |
          echo 'The triggering workflow failed'
          exit 1

  deploy-main-docs:
    name: Deploy Documentation
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    runs-on: ubuntu-latest
    steps:
    - name: setup - Checkout local code to establish repo
      uses: actions/checkout@v3.5.2
      with:
        fetch-depth: 1
    - name: setup - Setup Node.js
      uses: actions/setup-node@v3.6.0
      with:
        node-version-file: 'frontend/package.json'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: setup - Get Pull Requests from Github api
      id: get-prs
      run: |
         gh pr list -s open --json url,author,number,title,headRefName 
         gh pr list -s open --json url,author,number,title,headRefName > prs.json
         cat prs.json
         pull_requests=`cat prs.json`
         echo "pull_requests=${pull_requests}"
         echo "pull_requests=${pull_requests}" >> "$GITHUB_OUTPUT"

    - name: a-javadoc Make directory in case it doesn't exist
      run: mkdir -p ${{ env.javadoc_dest  }}
    - name: a-javadoc Download artifact
      uses: dawidd6/action-download-artifact@v2.27.0
      with:
        workflow: 02-gh-pages-rebuild-part-1.yml
        github_token: ${{secrets.GITHUB_TOKEN}}
        name: javadoc
        path: ${{env.javadoc_dest }}
        check_artifacts: true
        if_no_artifact_found: error
    - name: a-javadoc Debugging output
      run: | 
        ls -lRt
    - name: a-javadoc Deploy Javadoc (Main) ðŸš€
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: ${{ env.javadoc_dest }} # The folder where we put the files
        clean: true # Automatically remove deleted files from the deploy branch
        target-folder: javadoc # The folder that we serve our files from

    - name: b-storybook Make directory in case it doesn't exist
      run: mkdir -p ${{ env.storybook_dest }}
    - name: b-storybook Download artifact
      uses: dawidd6/action-download-artifact@v2.27.0
      with:
        workflow: 02-gh-pages-rebuild-part-1.yml
        github_token: ${{secrets.GITHUB_TOKEN}}
        name: storybook
        path: ${{ env.storybook_dest }}
        check_artifacts: true
        if_no_artifact_found: error
    - name: b-storybook Deploy Storybook (Main) ðŸš€
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder:  ${{ env.storybook_dest}} # The folder where the files come from
        clean: true # Automatically remove deleted files from the deploy branch
        target-folder: storybook # The folder that we serve our files from

    - name: c-jacoco Make directory in case it doesn't exist
      run: mkdir -p ${{ env.jacoco_dest }}
    - name: c-jacoco Download artifact
      uses: dawidd6/action-download-artifact@v2.27.0
      with:
        workflow: 02-gh-pages-rebuild-part-1.yml
        github_token: ${{secrets.GITHUB_TOKEN}}
        name: jacoco
        path: ${{ env.jacoco_dest }}
        check_artifacts: true
        if_no_artifact_found: error

    - name: c-jacoco Deploy Jacoco (Main) ðŸš€
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: ${{ env.jacoco_dest }} # The folder where we put the files
        clean: true # Automatically remove deleted files from the deploy branch
        target-folder: jacoco # The folder that we serve our files from

 
    - name: d-pitest Make directory in case it doesn't exist
      run: mkdir -p ${{ env.pitest_dest }}
    - name:  d-pitest Download artifact
      uses: dawidd6/action-download-artifact@v2.27.0
      with:
        workflow: 02-gh-pages-rebuild-part-1.yml
        github_token: ${{secrets.GITHUB_TOKEN}}
        name: pitest
        path: ${{ env.pitest_dest }}
        check_artifacts: true
        if_no_artifact_found: error
    - name:  d-pitest Deploy Pitest (main) ðŸš€
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: ${{ env.pitest_dest }} # The folder where we put the files
        clean: true # Automatically remove deleted files from the deploy branch
        target-folder: pitest # The folder that we serve our files from

    - name: e-coverage Make directory in case it doesn't exist
      run: mkdir -p ${{ env.coverage_dest }}
    - name: e-coverage Download artifact
      uses: dawidd6/action-download-artifact@v2.27.0
      with:
        workflow: 02-gh-pages-rebuild-part-1.yml
        github_token: ${{secrets.GITHUB_TOKEN}}
        name: coverage
        path: ${{ env.coverage_dest }}
        check_artifacts: true
        if_no_artifact_found: error

    - name: e-coverage Deploy Coverage (main) ðŸš€
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder:  ${{ env.coverage_dest }} # The folder where we put the files
        clean: true # Automatically remove deleted files from the deploy branch
        target-folder: coverage # The folder that we serve our files from

    - name: f-stryker Make directory in case it doesn't exist
      run: mkdir -p ${{ env.stryker_dest }}
    - name: f-stryker Download artifact
      uses: dawidd6/action-download-artifact@v2.27.0
      with:
        workflow: 02-gh-pages-rebuild-part-1.yml
        github_token: ${{secrets.GITHUB_TOKEN}}
        name: stryker
        path: ${{ env.stryker_dest }}
        check_artifacts: true
        if_no_artifact_found: error

    - name: f-stryker Deploy Stryker (main) ðŸš€
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder:  ${{ env.stryker_dest }} # The folder where we put the files
        clean: true # Automatically remove deleted files from the deploy branch
        target-folder: stryker # The folder that we serve our files from

  get-pull-requests:
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    name: Get Pull Requests
    runs-on: ubuntu-latest
    outputs:
      pull_requests: ${{ steps.get-prs.outputs.pull_requests }}
    steps:
    - name: Checkout local code to establish repo
      uses: actions/checkout@v3.5.2
    - name: Get Pull Requests from Github api
      id: get-prs
      run: |
        gh pr list -s open --json url,author,number,title,headRefName 
        gh pr list -s open --json url,author,number,title,headRefName > prs.json
        cat prs.json
        pull_requests=`cat prs.json`
        echo "pull_requests=${pull_requests}"
        echo "pull_requests=${pull_requests}" >> "$GITHUB_OUTPUT"

  deploy-doc-for-each-pr:
    name: PR ${{ matrix.value.number }} ${{ matrix.value.headRefName }}
    runs-on: ubuntu-latest
    if: ${{ needs.get-pull-requests.outputs.pull_requests != '[]' && needs.get-pull-requests.outputs.pull_requests != '' }}

    needs: [get-pull-requests, deploy-main-docs]

    strategy:
        max-parallel: 1
        matrix:
          value: ${{ fromJSON(needs.get-pull-requests.outputs.pull_requests)}}

    steps:
    - name: a-javadoc Checkout local code to establish repo
      uses: actions/checkout@v3.5.2

    - name: a-javadoc Make directory in case it doesn't exist
      run: mkdir -p ${{ env.javadoc_dest }}

    - name: a-javadoc Download artifact
      uses: dawidd6/action-download-artifact@v2.27.0
      with:
        workflow: 02-gh-pages-rebuild-part-1.yml
        github_token: ${{secrets.GITHUB_TOKEN}}
        name: prs-${{ matrix.value.number }}-javadoc
        path: ${{ env.javadoc_dest }}
        check_artifacts: true
        if_no_artifact_found: error

    - name: a-javadoc Deploy Javadoc (PR ${{ matrix.value.number }}) ðŸš€
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: ${{ env.javadoc_dest  }} # The folder where we put the files
        clean: true # Automatically remove deleted files from the deploy branch
        target-folder: prs/${{ matrix.value.number }}/javadoc # The folder that we serve our files from

  # deploy-jacoco-for-each-pr:
  #   name: Jacoco (PR ${{ matrix.value.number }}, Branch ${{ matrix.value.headRefName }})
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.get-pull-requests.outputs.pull_requests != '[]' && needs.get-pull-requests.outputs.pull_requests != '' }}

  #   needs: [deploy-javadoc-for-each-pr]

  #   env:
  #     destination: target/site/jacoco

  #   strategy:
  #       max-parallel: 1
  #       matrix:
  #         value: ${{ fromJSON(needs.get-pull-requests.outputs.pull_requests)}}

  #   steps:
  #   - name: Checkout local code to establish repo
  #     uses: actions/checkout@v3.5.2

  #   - name: Make directory in case it doesn't exist
  #     run: mkdir -p ${{ env.destination }}

  #   - name: Download artifact
  #     id: download-artifact
  #     uses: dawidd6/action-download-artifact@v2.27.0
  #     with:
  #       workflow: 02-gh-pages-rebuild-part-1.yml
  #       github_token: ${{secrets.GITHUB_TOKEN}}
  #       name: prs-${{ matrix.value.number }}-jacoco
  #       path: ${{ env.destination }}
  #       check_artifacts: true
  #       if_no_artifact_found: error

  #   - name: Debugging Output
  #     run: |
  #       ls -lRt

  #   - name: Deploy ðŸš€
  #     uses: JamesIves/github-pages-deploy-action@v4
  #     with:
  #       branch: gh-pages # The branch the action should deploy to.
  #       folder: ${{ env.destination }} # The folder where we put the files
  #       clean: true # Automatically remove deleted files from the deploy branch
  #       target-folder: prs/${{ matrix.value.number }}/jacoco # The folder that we serve our files from

  # rebuild-basic-site:
  #   name: Setup Node.js (and cache it)
  #   needs: [ deploy-jacoco-for-each-pr ]
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Append name of site to _config.yml
  #     run: | 
  #         CONFIG_YML=frontend/docs-index/_config.yml
  #         OWNER_PLUS_REPOSITORY=${{github.repository}}
  #         OWNER=${{ github.repository_owner }}
  #         REPOSITORY=${OWNER_PLUS_REPOSITORY/$OWNER\//}
  #         echo "repo: ${OWNER_PLUS_REPOSITORY}" >> ${CONFIG_YML}
  #         echo "owner: ${OWNER}" >> ${CONFIG_YML}
  #         echo "repo_name: ${REPOSITORY}" >> ${CONFIG_YML}    
  #         cat ${CONFIG_YML}

  #   - name: Store PRs as JSON in _config.yml
  #     run: |
  #        pull_requests=${{toJSON(needs.initialize.outputs.pull_requests)}}
  #        CONFIG_YML=frontend/docs-index/_config.yml
  #        echo "pull_requests: ${pull_requests}, CONFIG_YML: ${CONFIG_YML}"
  #        echo "pull_requests: ${pull_requests}" >> ${CONFIG_YML}
  #        cat ${CONFIG_YML}

  #   - name: Compose web site
  #     run: |
  #       mkdir -p site
  #       cp -r frontend/docs-index/* site
        
  #   - name: Deploy ðŸš€
  #     uses: JamesIves/github-pages-deploy-action@v4
  #     with:
  #       folder: site # The folder the action should deploy.
  #       branch: gh-pages
  #       clean: true # Automatically remove deleted files from the deploy branch
